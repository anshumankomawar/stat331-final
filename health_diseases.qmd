---
title: "Health care expenditure and disease prevelance"
subtitle: "Data cleaning, Part 1 of Project"
author: "Tarini Srikanth, Anshuman Komawar, Garret Ravatt"
format: html
self-contained: true
code-tools: true
toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
```

Reading in data
```{r}
healthcare_expenditure = read.csv("government_health_spending_of_total_gov_spending_percent.csv")
malaria_cases = read.csv("malaria_cases_per_100000_reported.csv")

```

1.1 Data Cleaning

Perform data cleaning as you see fit, making sure that you document each step you perform.

Step 1.2 asks you to pivot your data; it is possible that you will need to perform some data cleaning before pivoting! For example, if some incomes are recorded as 3.6 while others are recorded as "1.1k", R will not allow you to pivot your columns since these columns do not have the same data type! You will need to convert the value of "1.1k" into a number before pivoting.

```{r}

malaria_cases <- malaria_cases |>
  mutate(across(-country, ~ ifelse(str_detect(., "k$"), as.numeric(str_replace(., "k$", ""))*1000, as.numeric(.))))

options(scipen = 999)

```

For the Malaria Cases, 
We had to use the 'options' package in R to convert it string formatted numbers like 1.1k to 1100.00. 
Documentation: https://cran.r-project.org/web/packages/Tplyr/vignettes/options.html

For the healthcare expenditure, we didn't have to clean the data. 

1.2 Pivoting Longer

The values of year are spread across multiple columns. For your analysis, you will need to pivot these columns to be in a single column.

```{r}

malaria_cases <- malaria_cases |>
  pivot_longer(cols = starts_with("X"), 
               names_to = "year",
               values_to = "cases") |>
  mutate(year = str_remove(year, "X"))

```

```{r}

healthcare_expenditure <- healthcare_expenditure |>
  pivot_longer(cols = starts_with("X"), 
               names_to = "year",
               values_to = "spending") |>
  mutate(year = str_remove(year, "X"))

```

1.3 Joining Datasets

To have both of the variables in the same dataset, you will need to perform a join. The type of join is up to you, but keep in mind that the default in ggplot() and in lm() is to drop all of the NA values before plotting or fitting a regression model.

```{r}
# 137 entries contain NA values
data <- healthcare_expenditure |>
  inner_join(malaria_cases)
```


Written Components:
Detailed data and variable description.

Malaria Dataset:
Malaria cases per 100,000 residents that are reported. 
Data: Country (the country pertaining to the cases), Year (the year the cases were reported in), Cases (reported malaria cases per 100,000 people)

Healthcare Expenditure:
Government health spending of total government spending percentage. 
Data: Country(the country pertaining to the spending percentage), Year( the year the spending percentages are from), spending (the percentage of total government spending dedicated to health care)


Hypothesized relationship between the variables (and any outside references).

Our hypothesis is that with more government dedication and spending towards healthcare, diseases prevelance would decrease. We are focusing specifically on Malaria as the disease, and we believe that with more government dedication towards healthcare, cases of Malaria should decrease, as treatements and cures would benefit from extra government spending, and diseases would be eradicated faster. 

Discussion of data cleaning process and decisions.

For the healthcare expenditure dataset, we did not have to clean up the data, as all the data was present as numbers that represented percentages  of government spending. 

For the malaria dataset, we did have to clean up the cases varibale, as some were in string formats which we then had to convert to number representations. 

Apart from that, we did not clean the data too much, as we are only focusing on and looking at the cases and spending variables, which we joined into one dataset. 


Linear Regression

2.1 Data Vizualations

Create two visualizations exploring the following:

1. The relationship between the two quantitative variables you are investigating.
Remember: your response variable should be on the y-axis and your explanatory variable should be on the x-axis.
2. How this relationship (from #1) has changed over time.

```{r}

ggplot(data, aes(x = spending, y = cases)) +
  geom_point(alpha=0.2) +
  labs(x = "Healthcare Spending", y = "Malaria Cases") +
  ggtitle("Relationship between Healthcare Spending and Malaria Cases")


```

```{r}

ggplot(data, aes(x = year, y = cases, size = spending)) +
  geom_jitter(alpha=0.3, width=0.15) +
  labs(x = "Year", y = "Malaria Cases", size = "Healthcare Spending") +
  ggtitle("Malaria Cases with Healthcare Spending over Time") +
  scale_size_continuous(name = "Healthcare Spending")
```

2.2 Linear Regressions

Fit a simple linear regression model for the relationship between the variables you selected. Similar to your visualization, you will need to define which variable is the response (y) and which variable is the explanatory (x). Present the estimated regression model and provide an interpretation for each of the coefficients.

To perform your linear regression, you will likely want to summarize your data so you have one x value and one y value per country. You may do this by averaging (or taking the median) across all years, averaging across a subset of years, or picking a year of particular interest. Make sure you discuss your decision in your written report.

```{r}
#creating summarised data using all years
countrywise_data <- data|>
  filter(!is.na(cases), !is.na(spending))|>
  group_by(country)|>
  summarise(spending = mean(spending, na.rm = TRUE), cases = mean(cases, na.rm = TRUE))|>
  filter(cases>1000) #we want to focus on countries where malaria is an active problem
```

```{r}
countrywise_data|>
  ggplot(aes(x=spending, y=cases))+
  geom_point(alpha=0.7)
```

```{r}
model <- lm(spending ~ cases, data=countrywise_data)
summary(model)
```


2.3 Model Fit

The goal of regression is to account for as much variability in the response values as we can. To assess how “good” of a regression model you have, look at how much of the variability in the response was accounted for by your regression.

 The variance in your fitted values represents the amount of variability in the response that was accounted for by the explanatory variable. The variance in the residuals represents the amount of variability in the responses that was not accounted for.

Make a nicely formatted table that presents the following:

The variance in the response values.
The variance in the fitted values from your regression model.
The variance in the residuals from your regression model.
Discuss the proportion of the variability in the response values that was accounted for by your regression model. What does this suggest about the “quality” of your model?

```{r}

```

